Divide and Conquer Recurrences
    * Goal: Recipe for solving common divide-and-conquer recurrences:
        - T(n) = aT(n/b)+f(n)
    * Terms.
        - a ≥ 1 is the number of subproblems.
        - b ≥ 2 is the factor by which the subproblem size decreases.
        - f (n) ≥ 0 is the work to divide and combine subproblems.
    * Recursion Tree [ assuming n is a power of b]
        - a = branching factor.
        - a^i= number of subproblems at level i.
        - 1 + log_b(n) levels.
        - n / b^i = size of subproblem at level i.

Master Theorem: Let a ≥ 1, b ≥ 2, and c ≥ 0 and suppose that T (n) is a function on the non-negative integers that satisfies the recurrence
    T(n) = aT(n/b) + Θ(n^c)
    with T(0) = 0 and T(1) = Θ(1), where n / b means either ⎣n / b⎦ or ⎡n / b⎤. Then,
    * Case 1. If c > logb a, then T (n) = Θ(n^c).
    * Case 2. If c = logb a, then T (n) = Θ(n^c log n).
    * Case 3. If c < logb a, then T (n) = Θ(n^(log_b(a)))
    * Extensions.
        - Can replace Θ with O everywhere.
        - Can replace Θ with Ω everywhere.
        - Can replace initial conditions with T(n) = Θ(1) for all n ≤ n0 and require recurrence to hold only for all n > n0

Gaps in master theorem.
    * Number of subproblems is not a constant.
    * Number of subproblems is less than 1.
    * Work to divide and combine subproblems is not Θ(n^c).
