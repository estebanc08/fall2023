Unix and Linux Password Security

Unix/Linux Permission Sets
    File Permissions can be set to any of the following:
        * u: User who owns the file
        * g: Group associated with the file
        * o: Any other users
    Users Permision set (for file access) is determined by the most restrictive set containing that user
        * If you are the file owner, u permissions apply
        * If you are not the file owner but are in the files group, g permissions apply
        * If you are not owner or in group, o permissions apply

Permission Sets:
    * r : Read(Bit 2 in the octal representation of permissions: 1xx)
        - for directory can list files in it
    * w : Write (Bit 1: x1x)
        - for directory can store files in it
    * x : Executre (Bit 0: xx1)
        - for directory can traverse the directory
    * s/S : set-user/group (bit 2/1 of extra permissions group)
        - shows as s if file has execute permission or S if not
        - for directory: set group ID means created files will belong to the same group as the directory
    * t: Sticky-bit (But 0 of extra permissions group)
        - means only root and directory owner can remove files from directory (ignores this on files)
    * Example:
        ls -l /etc/passwd
        -rw-r--r-- 1 root root 2970 Aug  6 20:59 /etc/passwd

        - : File type       rw- : u permissions         r-- : g permissions     r-- : o permissions     1 : links to this file in the filesystem
        root: owner     root: group     2970: inode number      Aug 6 20:59 : date/time     /etc/passwd : file name

    * File Date/time (MAC TIME)
        - mtime: Time of last modification to the file contents (last written to)
        - atime: Time of last file access   (when was it last read)
        - ctime: Time of last change to files metadata (includes permissions)
    * By default ls -l shows m time
        - can use ls -lu to show atime
        - can use ls -lc to show ctime

Linux File Access Control Lists (ACLS)
    * Access Control lists let you assign file permissions to users or groups
        - setfacl -m u:jnw:rwx thisfile
    * Modifies the acls on the specific file to allow user jnw to read, write, and execute that file
    * when you use ls -l on files with ACLS, you will see a plus (+) to the right of the file permissions
    
Other File Attributes:
    * noteable among these are immutable and no atime updates
    * can make sys admins not be able to access files and atime masking can help hide malicious behavior
    * To set special file attributes, issue the command chattr with +x where x is the attribute identifier
    * For example, to make thisfile immutable, execute the command chattr +i thisfile

Permissions
    /tmp folder
        * /tmp is a directory with the sticky-bit
        * By default, anyone can list files in /tmp (r), create files im /tmp (w), or traverse through /tmp (x)
            - All users must be able to create files in / tmp, but
            - Other users shouldnt be able to delete your files

    /etc/passwd
        * /etc/passwd is a regular file
        * readable and writeable by root
        * represents the map betweem uid (number) and user name (a string) which must be visible for ls (and many other utilities) to work 
        * One line for each user
        * Entries on each line seperated by colons
            - User name (string)
            - Password (?)
            - User id (number)
            - Group id(number)
            - Users real name (gecos -string)
            - Home directory (dir path)
            - Shell (filepath)

Hash Functions
    - A hash function is a surjective map (every element of the range is mapped by an element in the domain) from a large (possibly infinite) domain into a smaller finite range
    - Cryptographic hashes typically map unbounded sequences of bytes (files) into short fixed-length bit-strings (hashes)
    - Good hash functions are relatively uniform, yet not easily predictable (hard to generate a message that has shown hash value)
    - Examples of cyrptographic hashes: MD5, SHA-256, SHA-512

Where are the passwords?
    * Symmetrically encrypted user passwords used to be stored in /etc/passwd
    * 1987 break in prompted Julie Haugh to develop shadow file plan
    * Under shadow plan, password hashes (which uses dont need to see) are placed in a file that is readable only by root. Other passwd info preserved in /etc/passwd
    * cat /etc/shadow Fields:
        - Username
        - Salt and hashed passwords
        - Days since epocj of last password change
        - Days until a change is allowed
        - Days before a change is required
        - Days warning for expiration
        - Days before account is innactive
        - Days since epoch when account expires
        - Reserved
    * $id$salt$hash
        - Id tells what hash function is used
        - $1$: MD5
        - $2$: Blowfish
        - $5$: SHA-256
        - $6$: SHA-512
    * Salt is prepended to the password before encryption
